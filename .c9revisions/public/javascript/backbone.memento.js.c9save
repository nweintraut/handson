{"ts":1372915449491,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Backbone.Memento v0.2.0\n//\n// Copyright (C)2011 Derick Bailey, Muted Solutions, LLC\n// Distributed Under MIT Liscene\n//\n// Documentation and Full Licence Availabe at:\n// http://github.com/derickbailey/backbone.memento\n\n// ----------------------------\n// Backbone.Memento\n// ----------------------------\nBackbone.Memento = function(model, config){\n  this.version = \"0.2.0\";\n\n  config = _.extend({\n    ignore: []\n  }, config);\n\n  var attributeStack;\n\n  function getAddedAttrDiff(newAttrs, oldAttrs){\n    var removedAttrs = [];\n\n    // guard clause to ensure we have attrs to compare\n    if (!newAttrs || !oldAttrs){\n      return removedAttrs;\n    }\n\n    // if the attr is found in the old set but not in\n    // the new set, then it was remove in the new set\n    for (var attr in oldAttrs){\n      if (oldAttrs.hasOwnProperty(attr)){\n        if (!newAttrs.hasOwnProperty(attr)){\n          removedAttrs.push(attr);\n        }\n      }\n    }\n\n    return removedAttrs;\n  }\n\n  function removeAttributes(model, attrsToRemove){\n    for (var index in attrsToRemove){\n      var attr = attrsToRemove[index];\n      model.unset(attr);\n    }\n  }\n\n  function restoreState(last, restoreConfig){\n    //get the previous state\n    var oldAttrs = attributeStack[last];\n    if (oldAttrs === undefined){ return; }\n    oldAttrs = dropIgnored(oldAttrs, restoreConfig);\n\n    //get the current state\n    var currentAttrs = model.toJSON();\n    currentAttrs = dropIgnored(currentAttrs, restoreConfig);\n\n    //handle removing attributes that were added\n    var removedAttrs = getAddedAttrDiff(oldAttrs, currentAttrs);\n    removeAttributes(model, removedAttrs);\n\n    //restore the previous state\n    model.set(oldAttrs);\n\n    //destroy the no-longer-current state\n    delete attributeStack[last];\n  }\n\n  function dropIgnored(attrs, restoreConfig){\n    attrs = _.clone(attrs);\n    if (restoreConfig.hasOwnProperty(\"ignore\") && restoreConfig.ignore.length > 0){\n      for(var index in restoreConfig.ignore){\n        var ignore = restoreConfig.ignore[index];\n        delete attrs[ignore];\n      }\n    }\n    return attrs;\n  }\n\n  function initialize(){\n    attributeStack = new Array();\n  }\n\n  this.store = function(){\n    var attrs = model.toJSON();\n    attrs = dropIgnored(attrs, config);\n    attributeStack.push(attrs);\n  }\n  \n  this.restore = function(restoreConfig){\n    if (restoreConfig === undefined){\n      restoreConfig = _.clone(config);\n    }\n\n    var last = attributeStack.length-1;\n    if (last < 0) {\n      return null;\n    }\n\n    restoreState(last, restoreConfig);\n  }\n\n  this.reset = function(){\n    if(attributeStack.length === 0){\n      return null;\n    }\n    restoreState(0, config);\n    // restoreState deleted item 0, but really \n    // we should be starting from scratch.\n    initialize();\n  }\n\n  initialize();\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":2801}]],"length":2801}
