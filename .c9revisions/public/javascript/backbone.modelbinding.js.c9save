{"ts":1372915437728,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Backbone.ModelBinding v0.3.7\n//\n// Copyright (C)2011 Derick Bailey, Muted Solutions, LLC\n// Distributed Under MIT Liscene\n//\n// Documentation and Full Licence Availabe at:\n// http://github.com/derickbailey/backbone.modelbinding\n\n// ----------------------------\n// Backbone.ModelBinding\n// ----------------------------\nBackbone.ModelBinding = (function(){\n  function handleConventionBindings(view, model){\n    var conventions = Backbone.ModelBinding.Conventions;\n    for (var conventionName in conventions){\n      if (conventions.hasOwnProperty(conventionName)){\n        var conventionElement = conventions[conventionName];\n        var handler = conventionElement.handler;\n        var conventionSelector = conventionElement.selector;\n        handler.bind(conventionSelector, view, model);\n      }\n    }\n  }\n\n  function handleUnbinding(view, model){\n    var conventions = Backbone.ModelBinding.Conventions;\n    for (var conventionName in conventions){\n      if (conventions.hasOwnProperty(conventionName)){\n        var conventionElement = conventions[conventionName];\n        var handler = conventionElement.handler;\n        var conventionSelector = conventionElement.selector;\n        if (handler.unbind){\n          handler.unbind(conventionSelector, view, model);\n        }\n      }\n    }\n  }\n\n  return {\n    version: \"0.3.7\",\n\n    bind: function(view, options){\n      Backbone.ModelBinding.Configuration.configureBindingAttributes(options);\n      handleConventionBindings(view, view.model);\n      Backbone.ModelBinding.Configuration.restoreBindingAttrConfig();\n    },\n\n    unbind: function(view){\n      handleUnbinding(view, view.model);\n    }\n  }\n})();\n\n// ----------------------------\n// Model Binding Configuration\n// ----------------------------\nBackbone.ModelBinding.Configuration = (function(){\n  var bindingAttrConfig = {\n\t  text: \"id\",\n\t  textarea: \"id\",\n\t  password: \"id\",\n\t  radio: \"name\",\n\t  checkbox: \"id\",\n\t  select: \"id\"\n  };\n\n  return {\n    configureBindingAttributes: function(options){\n      if (options) {\n        this.storeBindingAttrConfig();\n        if (options.all){\n          this.configureAllBindingAttributes(options.all);\n          delete options.all;\n        }\n        _.extend(bindingAttrConfig, options);\n      }\n    },\n\n    configureAllBindingAttributes: function(attribute){\n      this.storeBindingAttrConfig();\n      bindingAttrConfig.text = attribute;\n      bindingAttrConfig.textarea = attribute;\n      bindingAttrConfig.password = attribute;\n      bindingAttrConfig.radio = attribute;\n      bindingAttrConfig.checkbox = attribute;\n      bindingAttrConfig.select = attribute;\n    },\n\n    storeBindingAttrConfig: function(){\n      this._config = _.clone(bindingAttrConfig);\n    },\n\n    restoreBindingAttrConfig: function(){\n      if (this._config) {\n        bindingAttrConfig = this._config;\n        delete this._config;\n      }\n    },\n    \n    getBindingAttr: function(type){ return bindingAttrConfig[type]; },\n\n    getBindingValue: function(element, type){\n      var bindingAttr = this.getBindingAttr(type);\n      return element.attr(bindingAttr);\n    }\n  }\n})();\n\n// ----------------------------\n// Text, Textarea, and Password Bi-Directional Binding Methods\n// ----------------------------\nBackbone.ModelBinding.StandardBinding = (function(){\n  var methods = {};\n\n  methods._getElementType = function(element) {\n    var type = element[0].tagName.toLowerCase();\n    if (type == \"input\"){\n      type = element.attr(\"type\");\n      if (type == undefined || type == ''){\n        type = 'text'\n      }\n    }\n    return type;\n  }\n\n  methods._modelChange = function(changed_model, val){\n    this.element.val(val);\n  };\n\n  methods.unbind = function(selector, view, model){\n    view.$(selector).each(function(index){\n      var element = view.$(this);\n      var attribute_name = Backbone.ModelBinding.Configuration.getBindingValue(element, methods._getElementType(element));\n      // unbind the model changes to the form elements\n      model.unbind(\"change:\" + attribute_name, methods._modelChange);\n    });\n  };\n\n  methods.bind = function(selector, view, model){\n    view.$(selector).each(function(index){\n      var element = view.$(this);\n      var attribute_name = Backbone.ModelBinding.Configuration.getBindingValue(element, methods._getElementType(element));\n      // bind the model changes to the form elements\n      // force \"this\" to be our config object, so i can\n      // get the data that i need, during the callback.\n      // i have to do it this way because the unbinding\n      // that occurs a few lines above, in the \"unbind\" method\n      // requires the same instance of the callback method as\n      // was passed into the bind method here. however, i need\n      // more data in the callback than i'm able to get because\n      // it's a callback, limited to the model's \"change\" event.\n      // by passing in \"config\" as \"this\" for the callback, i\n      // can get all the data i need. you'll see this pattern\n      // repeated through the rest of the binding objects.\n      var config = {element: element};\n      model.bind(\"change:\" + attribute_name, methods._modelChange, config);\n      \n      // bind the form changes to the model\n      element.bind(\"change\", function(ev){\n        var data = {};\n        data[attribute_name] = view.$(ev.target).val();\n        model.set(data);\n      });\n\n      // set the default value on the form, from the model\n      var attr_value = model.get(attribute_name);\n      if (typeof attr_value !== \"undefined\" && attr_value !== null) {\n        element.val(attr_value);\n      }\n    });\n  };\n\n  return methods;\n})();\n\n// ----------------------------\n// Select Box Bi-Directional Binding Methods\n// ----------------------------\nBackbone.ModelBinding.SelectBoxBinding = (function(){\n  var methods = {};\n\n  methods._modelChange = function(changed_model, val){\n    this.element.val(val);\n  }\n\n  methods.unbind = function(selector, view, model){\n    view.$(selector).each(function(index){\n      var element = view.$(this);\n      var attribute_name = Backbone.ModelBinding.Configuration.getBindingValue(element, 'select');\n      model.unbind(\"change:\" + attribute_name, methods._modelChange);\n    });\n  }\n\n  methods.bind = function(selector, view, model){\n    view.$(selector).each(function(index){\n      var element = view.$(this);\n      var attribute_name = Backbone.ModelBinding.Configuration.getBindingValue(element, 'select');\n\n      // bind the model changes to the form elements\n      var config = {element: element};\n      model.bind(\"change:\" + attribute_name, methods._modelChange, config);\n\n      // bind the form changes to the model\n      element.bind(\"change\", function(ev){\n        var data = {};\n        var targetEl = view.$(ev.target);\n        data[attribute_name] = targetEl.val();\n        data[attribute_name + \"_text\"] = targetEl.find(\":selected\").text();\n        model.set(data);\n      });\n\n      // set the default value on the form, from the model\n      var attr_value = model.get(attribute_name);\n      if (typeof attr_value !== \"undefined\" && attr_value !== null) {\n        element.val(attr_value);\n      }\n    });\n  };\n\n  return methods;\n})();\n\n// ----------------------------\n// Radio Button Group Bi-Directional Binding Methods\n// ----------------------------\nBackbone.ModelBinding.RadioGroupBinding = (function(){\n  var methods = {};\n\n  methods._modelChange = function(model, val){\n    var value_selector = \"input[type=radio][\" + this.bindingAttr + \"=\" + this.group_name + \"][value=\" + val + \"]\";\n    this.view.$(value_selector).attr(\"checked\", \"checked\");\n  }\n\n  methods.unbind = function(selector, view, model){\n    var foundElements = [];\n    view.$(selector).each(function(index){\n      var element = view.$(this);\n      var group_name = Backbone.ModelBinding.Configuration.getBindingValue(element, 'radio');\n      if (!foundElements[group_name]) {\n        foundElements[group_name] = true;\n        var bindingAttr = Backbone.ModelBinding.Configuration.getBindingAttr('radio');\n        model.unbind(\"change:\" + group_name, methods._modelChange);\n      }\n    });\n  }\n\n  methods.bind = function(selector, view, model){\n    var foundElements = [];\n    view.$(selector).each(function(index){\n      var element = view.$(this);\n\n      var group_name = Backbone.ModelBinding.Configuration.getBindingValue(element, 'radio');\n      if (!foundElements[group_name]) {\n        foundElements[group_name] = true;\n        var bindingAttr = Backbone.ModelBinding.Configuration.getBindingAttr('radio');\n\n        // bind the model changes to the form elements\n        var config = {\n          bindingAttr: bindingAttr,\n          group_name: group_name,\n          view: view\n        };\n        model.bind(\"change:\" + group_name, methods._modelChange, config);\n\n        // bind the form changes to the model\n        var group_selector = \"input[type=radio][\" + bindingAttr + \"=\" + group_name + \"]\";\n        view.$(group_selector).bind(\"change\", function(ev){\n          var element = view.$(ev.currentTarget);\n          if (element.attr(\"checked\")){\n            var data = {};\n            data[group_name] = element.val();\n            model.set(data);\n          }\n        });\n\n        // set the default value on the form, from the model\n        var attr_value = model.get(group_name);\n        if (typeof attr_value !== \"undefined\" && attr_value !== null) {\n          var value_selector = \"input[type=radio][\" + bindingAttr + \"=\" + group_name + \"][value=\" + attr_value + \"]\";\n          view.$(value_selector).attr(\"checked\", \"checked\");\n        }\n      }\n    });\n  };\n\n  return methods;\n})();\n\n// ----------------------------\n// Checkbox Bi-Directional Binding Methods\n// ----------------------------\nBackbone.ModelBinding.CheckboxBinding = (function(){\n  var methods = {};\n\n  methods._modelChange = function(model, val){\n    if (val){\n      this.element.attr(\"checked\", \"checked\");\n    }\n    else{\n      this.element.removeAttr(\"checked\");\n    }\n  }\n\n  methods.unbind = function(selector, view, model){\n    view.$(selector).each(function(index){\n      var element = view.$(this);\n      var attribute_name = Backbone.ModelBinding.Configuration.getBindingValue(element, 'checkbox');\n      model.unbind(\"change:\" + attribute_name, methods._modelChange);\n    });\n  }\n\n  methods.bind = function(selector, view, model){\n    view.$(selector).each(function(index){\n      var element = view.$(this);\n      var attribute_name = Backbone.ModelBinding.Configuration.getBindingValue(element, 'checkbox');\n\n      // bind the model changes to the form elements\n      var config = {element: element};\n      model.bind(\"change:\" + attribute_name, methods._modelChange, config);\n\n      // bind the form changes to the model\n      element.bind(\"change\", function(ev){\n        var data = {};\n        var changedElement = view.$(ev.target);\n        var checked = changedElement.attr(\"checked\")? true : false;\n        data[attribute_name] = checked;\n        model.set(data);\n      });\n\n      // set the default value on the form, from the model\n      var attr_exists = model.attributes.hasOwnProperty(attribute_name);\n      if (attr_exists) {\n        var attr_value = model.get(attribute_name);\n        if (typeof attr_value !== \"undefined\" && attr_value !== null && attr_value != false) {\n          element.attr(\"checked\", \"checked\");\n        }\n        else{\n          element.removeAttr(\"checked\");\n        }\n      }\n    });\n  }\n\n  return methods;\n})();\n\n// ----------------------------\n// Data-Bind Binding Methods\n// ----------------------------\nBackbone.ModelBinding.DataBindBinding = (function(){\n  var methods = {};\n\n  var dataBindSubstConfig = {\n    \"default\": \"\"\n  }\n\n  Backbone.ModelBinding.Configuration.dataBindSubst = function(config){\n    this.storeDataBindSubstConfig();\n    _.extend(dataBindSubstConfig, config);\n  }\n\n  Backbone.ModelBinding.Configuration.storeDataBindSubstConfig = function(){\n    Backbone.ModelBinding.Configuration._dataBindSubstConfig = _.clone(dataBindSubstConfig);\n  }\n\n  Backbone.ModelBinding.Configuration.restoreDataBindSubstConfig = function(){\n    if (Backbone.ModelBinding.Configuration._dataBindSubstConfig){\n      dataBindSubstConfig = Backbone.ModelBinding.Configuration._dataBindSubstConfig;\n      delete Backbone.ModelBinding.Configuration._dataBindSubstConfig;\n    }\n  }\n\n  Backbone.ModelBinding.Configuration.getDataBindSubst = function(elementType, value){\n    var returnValue = value;\n    if (value === undefined){\n      if (dataBindSubstConfig.hasOwnProperty(elementType)){\n        returnValue = dataBindSubstConfig[elementType];\n      } else {\n        returnValue = dataBindSubstConfig[\"default\"];\n      }\n    }\n    return returnValue;\n  }\n\n  methods._modelChange = function(model, val){\n    methods._setOnElement(this.element, this.elementAttr, val);\n  }\n\n  methods._setOnElement = function(element, attr, val){\n    var valBefore = val;\n    val = Backbone.ModelBinding.Configuration.getDataBindSubst(attr, val);\n    switch(attr){\n      case \"html\":\n        element.html(val);\n        break;\n      case \"text\":\n        element.text(val);\n        break;\n      case \"enabled\":\n        element.attr(\"disabled\", !val);\n        break;\n      case \"displayed\":\n        element.css(\"display\", val ? 'block' : 'none' );\n        break;\n      case \"hidden\":\n        element.css(\"display\", val ? 'none' : 'block' );\n        break;\n      default:\n        element.attr(attr, val);\n    }\n  }\n\n  methods._splitBindingAttr = function(element)\n  {\n    var dataBindConfigList = [];\n    var databindList = element.attr(\"data-bind\").split(\";\");\n    _.each(databindList, function(attrbind){\n      var databind = attrbind.trim().split(\" \");\n\n      // make the default special case \"text\" if none specified\n      if( databind.length == 1 ) databind.unshift(\"text\");\n\n      dataBindConfigList.push({\n        elementAttr: databind[0],\n        modelAttr: databind[1]\n      });\n    });\n    return dataBindConfigList;\n  }\n\n  methods.bind = function(selector, view, model){\n    view.$(selector).each(function(index){\n      var element = view.$(this);\n      var databindList = methods._splitBindingAttr(element);\n\n      _.each(databindList, function(databind){\n        var config = {\n          element: element,\n          elementAttr: databind.elementAttr\n        };\n        model.bind(\"change:\" + databind.modelAttr, methods._modelChange, config);\n\n        // set default on data-bind element\n        methods._setOnElement(element, databind.elementAttr, model.get(databind.modelAttr));\n      });\n    });\n  }\n\n  methods.unbind = function(selector, view, model){\n    view.$(selector).each(function(index){\n      var element = view.$(this);\n      var databindList = methods._splitBindingAttr(element);\n      _.each(databindList, function(databind){\n        model.unbind(\"change:\" + databind.modelAttr, methods._modelChange);\n      });\n    });\n  }\n\n  return methods;\n})();\n\n\n// ----------------------------\n// Binding Conventions\n// ----------------------------\nBackbone.ModelBinding.Conventions = (function(){\n  return {\n    text: {selector: \"input:text\", handler: Backbone.ModelBinding.StandardBinding}, \n    textarea: {selector: \"textarea\", handler: Backbone.ModelBinding.StandardBinding},\n    password: {selector: \"input:password\", handler: Backbone.ModelBinding.StandardBinding},\n    radio: {selector: \"input:radio\", handler: Backbone.ModelBinding.RadioGroupBinding},\n    checkbox: {selector: \"input:checkbox\", handler: Backbone.ModelBinding.CheckboxBinding},\n    select: {selector: \"select\", handler: Backbone.ModelBinding.SelectBoxBinding},\n    databind: { selector: \"*[data-bind]\", handler: Backbone.ModelBinding.DataBindBinding}\n  }\n})();\n\n"]],"start1":0,"start2":0,"length1":0,"length2":15635}]],"length":15635}
